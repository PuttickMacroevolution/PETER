# No mass extinction simulation#
library(RSOLE)#
library(parallel)#
#
# speciation rate#
lambda.val <- 1#
# Brownian variance#
bm.val <- 1#
#
# single trait
# No mass extinction simulation#
library(RSOLE)#
library(parallel)
# speciation rate#
lambda.val <- 1#
# Brownian variance#
bm.val <- 1
mu.val=0
tip.n=50
est.out <- build.tree.tips(lambda=lambda.val, mu=mu.val, extant.tips=tip.n, mass.ext.occ=FALSE, sigma.rates=bm.val)
est.out
rm(list=ls(all=TRUE))
## Puttick et al. Code to simulate diversity and trait data through time with no mass extinction simulation, in #
## simulations with one, two, and five traits generated under Brownian motion and trees generated under #
## homogeneous birth-death processes#
#
library(RSOLE)#
library(parallel)#
#
## set speciation rate for all simulations#
	lambda.val <- 1#
## set Brownian motion rate for all simulations#
	bm.val <- 1#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
# single trait
args(build.tree.tips)
mu.val=0
tip.n =50
disp.out <- mclapply(1:100, mc.cores=n.cores, function(u) {#
		est.out <- build.tree.tips(lambda=lambda.val, mu=mu.val, extant.tips=tip.n, mass.ext.occ=FALSE, sigma.rates=bm.val)#
			}#
		)
name.out <- paste0("tips_", tip.n, ".mu_", mu.val, ".sigma_", bm.val)
assign(name.out, disp.out)
save(list=name.out, file=paste0(name.out, ".R"), compress="xz")
## Puttick et al. #
## Code to simulate diversity and trait data through time with a directional mass extinction when#
## 50, 100, or 200 taxa are present. #
#
## The extinction removes a proportion (0.5, 0.75, or 0.9) of contemporary species.#
## Taxa are removed according to a strictly selective extinction in which all taxa with traits values above a quantile value#
## become extinct (become tips). In a strong extinction there is the same quantile, but a 0.01 chance taxa with traits above #
## the quantile value survive, and 0.01 chance those with a value below it are lost. The simulation continues until the pre-#
## extinction diversity (50, 100, 200 tips) is recovered. Simulations are repeated with one, two, and five traits. For#
## these models, selection acts on the first trait and runs are repeated with no co-variance between trait evolution and#
## 0.75 trait co-variation. All trees generated under homogeneous birth-death processes.#
#
library(RSOLE)#
library(parallel)#
#
## speciation rate#
	lambda.val <- 1#
#
## Brownian variance#
	bm.val <- 1#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
## chance of random extinction for strict, strong, and random extinctions#
	random <- c(0, 0.01, 1)#
#
## number of tips in the simulations#
	tip.number <- c(200, 100, 50)#
#
## the number of taxa that go extinct at an extinction boundary#
	severity <- c(0.5, 0.75, 0.9)#
#
## single.trait
## Puttick et al. #
## Code to simulate diversity and trait data through time with a directional mass extinction when#
## 50, 100, or 200 taxa are present. #
#
## The extinction removes a proportion (0.5, 0.75, or 0.9) of contemporary species.#
## Taxa are removed according to a strictly selective extinction in which all taxa with traits values above a quantile value#
## become extinct (become tips). In a strong extinction there is the same quantile, but a 0.01 chance taxa with traits above #
## the quantile value survive, and 0.01 chance those with a value below it are lost. The simulation continues until the pre-#
## extinction diversity (50, 100, 200 tips) is recovered. Simulations are repeated with one, two, and five traits. For#
## these models, selection acts on the first trait and runs are repeated with no co-variance between trait evolution and#
## 0.75 trait co-variation. All trees generated under homogeneous birth-death processes.#
#
library(RSOLE)#
library(parallel)#
#
## speciation rate#
	lambda.val <- 1#
#
## Brownian variance#
	bm.val <- 1#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
## chance of random extinction for strict, strong, and random extinctions#
	random <- c(0, 0.01, 1)#
#
## number of tips in the simulations#
	tip.number <- c(200, 100, 50)#
#
## the number of taxa that go extinct at an extinction boundary#
	severity <- c(0.5, 0.75, 0.9)#
#
## example analysis#
#
	disp.out <- mclapply(1:length.to.do, mc.cores=n.cores, function(in.lo) {#
		est.out <- suppressWarnings(build.tree.tips(lambda=1, mu=0.4, extant.tips=50, mass.ext.occ=TRUE, sigma.rates=1, mass.ext.tips=50, mass.ext.quantile=1-0.5, mass.ext.severity=0.5, chance.of.random=0.01, trait.axes=1))#
			}#
		)#
	name.out <- paste0("tips_", y, ".mu_", mu.val, ".severity_", u, ".random_", i)#
	assign(name.out, disp.out)#
	save(list=name.out, file=paste0(name.out, ".R"), compress="xz")
rm(list=ls(all=TRUE))
## Puttick et al. #
## Code to simulate diversity and trait data through time with a directional mass extinction when#
## 50, 100, or 200 taxa are present. #
#
## The extinction removes a proportion (0.5, 0.75, or 0.9) of contemporary species.#
## Taxa are removed according to a strictly selective extinction in which all taxa with traits values above a quantile value#
## become extinct (become tips). In a strong extinction there is the same quantile, but a 0.01 chance taxa with traits above #
## the quantile value survive, and 0.01 chance those with a value below it are lost. The simulation continues until the pre-#
## extinction diversity (50, 100, 200 tips) is recovered. Simulations are repeated with one, two, and five traits. For#
## these models, selection acts on the first trait and runs are repeated with no co-variance between trait evolution and#
## 0.75 trait co-variation. All trees generated under homogeneous birth-death processes.#
#
library(RSOLE)#
library(parallel)#
#
## speciation rate#
	lambda.val <- 1#
#
## Brownian variance#
	bm.val <- 1#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
## chance of random extinction for strict, strong, and random extinctions#
	random <- c(0, 0.01, 1)#
#
## number of tips in the simulations#
	tip.number <- c(200, 100, 50)#
#
## the number of taxa that go extinct at an extinction boundary#
	severity <- c(0.5, 0.75, 0.9)#
#
## example analysis#
#
	disp.out <- mclapply(1:100, mc.cores=n.cores, function(in.lo) {#
		est.out <- suppressWarnings(build.tree.tips(lambda=1, mu=0.4, extant.tips=50, mass.ext.occ=TRUE, sigma.rates=1, mass.ext.tips=50, mass.ext.quantile=1-0.5, mass.ext.severity=0.5, chance.of.random=0.01, trait.axes=1))#
			}#
		)#
	name.out <- paste0("../tips_", y, ".mu_", mu.val, ".severity_", u, ".random_", i)#
	assign(name.out, disp.out)#
	save(list=name.out, file=paste0(name.out, ".R"), compress="xz")
rm(list=ls(all=TRUE))
## Puttick et al. #
## Code to simulate diversity and trait data through time with a directional mass extinction when#
## 50, 100, or 200 taxa are present. #
#
## The extinction removes a proportion (0.5, 0.75, or 0.9) of contemporary species.#
## Taxa are removed according to a strictly selective extinction in which all taxa with traits values above a quantile value#
## become extinct (become tips). In a strong extinction there is the same quantile, but a 0.01 chance taxa with traits above #
## the quantile value survive, and 0.01 chance those with a value below it are lost. The simulation continues until the pre-#
## extinction diversity (50, 100, 200 tips) is recovered. Simulations are repeated with one, two, and five traits. For#
## these models, selection acts on the first trait and runs are repeated with no co-variance between trait evolution and#
## 0.75 trait co-variation. All trees generated under homogeneous birth-death processes.#
#
library(RSOLE)#
library(parallel)#
#
## speciation rate#
	lambda.val <- 1#
#
## Brownian variance#
	bm.val <- 1#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
## chance of random extinction for strict, strong, and random extinctions#
	random <- c(0, 0.01, 1)#
#
## number of tips in the simulations#
	tip.number <- c(200, 100, 50)#
#
## the number of taxa that go extinct at an extinction boundary#
	severity <- c(0.5, 0.75, 0.9)#
#
## example analysis#
#
	disp.out <- mclapply(1:100, mc.cores=n.cores, function(in.lo) {#
		est.out <- suppressWarnings(build.tree.tips(lambda=1, mu=0.4, extant.tips=50, mass.ext.occ=TRUE, sigma.rates=1, mass.ext.tips=50, mass.ext.quantile=1-0.5, mass.ext.severity=0.5, chance.of.random=0.01, trait.axes=1))#
			}#
		)#
	name.out <- paste0("tips_50.mu_0.4.severity_0.5.random_0.01")#
	assign(name.out, disp.out)#
	save(list=name.out, file=paste0("../", name.out, ".R"), compress="xz")
rm(list=ls(all=TRUE))
## Puttick et al. #
## Code to simulate diversity and trait data through time with a directional mass extinction when#
## 50, 100, or 200 taxa are present. #
#
## The extinction removes a proportion (0.5, 0.75, or 0.9) of contemporary species.#
## Taxa are removed according to a strictly selective extinction in which all taxa with traits values above a quantile value#
## become extinct (become tips). In a strong extinction there is the same quantile, but a 0.01 chance taxa with traits above #
## the quantile value survive, and 0.01 chance those with a value below it are lost. The simulation continues until the pre-#
## extinction diversity (50, 100, 200 tips) is recovered. Simulations are repeated with one, two, and five traits. For#
## these models, selection acts on the first trait and runs are repeated with no co-variance between trait evolution and#
## 0.75 trait co-variation. All trees generated under homogeneous birth-death processes.#
#
library(RSOLE)#
library(parallel)#
#
## speciation rate#
	lambda.val <- 1#
#
## Brownian variance#
	bm.val <- 1#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
## chance of random extinction for strict, strong, and random extinctions#
	random <- c(0, 0.01, 1)#
#
## number of tips in the simulations#
	tip.number <- c(200, 100, 50)#
#
## the number of taxa that go extinct at an extinction boundary#
	severity <- c(0.5, 0.75, 0.9)#
#
## example analysis#
#
	set.seed(101)#
	disp.out <- mclapply(1:100, mc.cores=n.cores, function(in.lo) {#
		est.out <- suppressWarnings(build.tree.tips(lambda=1, mu=0.4, extant.tips=50, mass.ext.occ=TRUE, sigma.rates=1, mass.ext.tips=50, mass.ext.quantile=1-0.5, mass.ext.severity=0.5, chance.of.random=0.01, trait.axes=1))#
			}#
		)#
	name.out <- paste0("tips_50.mu_0.4.severity_0.5.random_0.01")#
	assign(name.out, disp.out)#
	save(list=name.out, file=paste0("../", name.out, ".R"), compress="xz")
## Puttick et al. #
## Code to simulate diversity and trait data through time with a directional mass extinction when#
## 50, 100, or 200 taxa are present. #
#
## The extinction removes a proportion (0.5, 0.75, or 0.9) of contemporary species.#
## Taxa are removed according to a strictly selective extinction in which all taxa with traits values above a quantile value#
## become extinct (become tips). In a strong extinction there is the same quantile, but a 0.01 chance taxa with traits above #
## the quantile value survive, and 0.01 chance those with a value below it are lost. The simulation continues until the pre-#
## extinction diversity (50, 100, 200 tips) is recovered. Simulations are repeated with one, two, and five traits. For#
## these models, selection acts on the first trait and runs are repeated with no co-variance between trait evolution and#
## 0.75 trait co-variation. All trees generated under homogeneous birth-death processes.#
#
library(RSOLE)#
library(parallel)#
#
## speciation rate#
	lambda.val <- 1#
#
## Brownian variance#
	bm.val <- 1#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
## chance of random extinction for strict, strong, and random extinctions#
	random <- c(0, 0.01, 1)#
#
## number of tips in the simulations#
	tip.number <- c(200, 100, 50)#
#
## the number of taxa that go extinct at an extinction boundary#
	severity <- c(0.5, 0.75, 0.9)#
#
## example analysis#
#
	set.seed(101)#
	disp.out <- mclapply(1:100, mc.cores=n.cores, function(in.lo) {#
		est.out <- suppressWarnings(build.tree.tips(lambda=1, mu=0.4, extant.tips=50, mass.ext.occ=TRUE, sigma.rates=1, mass.ext.tips=50, mass.ext.quantile=1-0.5, mass.ext.severity=0.5, chance.of.random=0.01, trait.axes=1))#
			}#
		)#
	name.out <- paste0("tips_50.mu_0.4.severity_0.5.random_0.01")#
	assign(name.out, disp.out)#
	save(list=name.out, file=paste0("../precooked.output/", name.out, ".R"), compress="xz")#
## single.trait
