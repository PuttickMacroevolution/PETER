load("/Users/markputtick/Documents/disparitySimulation/supplementary/background.extinction/background.both.side.R")
load("/Users/markputtick/Documents/disparitySimulation/supplementary/background.extinction/background.one.side.R")
## Puttick et al. #
## Estimate disparity for generated data using median pairwise euclidean distance, median pairwise distance from the root,#
## Sum Of Variances, and Sum Of Ranges using the dispRity package.#
#
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## files to summarise#
sigma.files <- list.files(pattern="tips_")#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1
length(sigma.files)
rm(list=ls(all=TRUE))
## Puttick et al. #
## Estimate disparity for generated data using median pairwise euclidean distance, median pairwise distance from the root,#
## Sum Of Variances, and Sum Of Ranges using the dispRity package.#
#
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## files to summarise#
input.file <- list.files(pattern="tips_")#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
	load(input.file ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub(".R", "", input.file)))#
	ltt.out <- list()
for(xx in 1:100) {#
		ltt.out.temp <- in.file[[xx]]$ltt#
		going <- c()		#
		root.state <- in.file[[xx]]$root.state#
		x.out <- sapply(in.file[[xx]]$node.traits, function(x) {#
			x.in <- as.matrix(x)#
			n.col <- ncol(x.in)#
			if(nrow(x.in) > 2) {#
				euclid.out <- unlist(dispRity(x.in, metric = c(median, pairwise.dist), method="euclidean")$disparity)	#
				if(n.col == 1) x.in <- cbind(as.matrix(x), 0)#
				sov.out <- unlist(dispRity(x.in, metric = c(sum, variances))$disparity)#
				sor.out <- unlist(dispRity(x.in, metric = c(sum, ranges))$disparity)#
				if(n.col == 1) x.in <- cbind(as.matrix(x), in.file[[xx]]$root.state)#
				centroid.out <- unlist(dispRity(x.in, metric = c(centroids, median), centroid=root.state)$disparity)#
				cbind(euclid.out, sov.out, sor.out, centroid.out)#
				} else {#
				cbind(rep(NA, 4))#
				}#
			}#
		)
x.out <- t(x.out)#
		node.info <- cbind(ltt.out.temp, x.out)#
		colnames(node.info)[-c(1:2)] <- c("median.euclidean", "sov", "sor", "centroid")#
		ltt.out[[xx]] <- node.info#
	}
ltt.out[[1]]
ltt.write <- gsub(".R", ".dvtt", input.files)
ltt.write <- gsub(".R", ".dvtt", input.file)
assign(ltt.write, ltt.out)
save(list=ltt.write, file=gsub(".R", ".dvltt.R", input.file), compress="xz")
# source('/panfs/panasas01/gely/mp1728/disp_sim/distance.measures.R', chdir = TRUE)#
#
library(parallel)#
library(RSOLE)#
library(dispRity)
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
sigma.files <- list.files(pattern="tips_")#
all.files <- all.files.start <- c()
rm(list=ls(all=TRUE))
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
sigma.files <- list.files(pattern="tips_")#
all.files <- all.files.start <- c()#
all.outs <- mclapply(1:length(sigma.files), mc.cores=n.cores , FUN=function(count) {#
	load(sigma.files[count] ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub(".R", "", sigma.files[count])))#
	list.full <- list()#
	counter <- 1#
	# four, six, ten, bins#
	for(bin.number in c(2, 4, 5, 8)) {#
		# complete, half, tenth, hundreth sampling#
		for(sample.number in c(1, 0.5, 0.1, 0.01)) {#
			difference.in.metric <- c()#
			for(xx in 1:100) {#
				ltt.out.temp <- in.file[[xx]]$ltt#
				mass.time.temp <- in.file[[xx]]$mass.ext.time#
				end.seq <- max(ltt.out.temp[,1])#
				mass.to.end <- end.seq - mass.time.temp#
				pre.mass <- mass.time.temp - (mass.to.end / bin.number)#
				end.seq <- mass.time.temp + (mass.to.end / bin.number)#
				breaks <- c(pre.mass, mass.time.temp, end.seq)#
				bin.dat <- .bincode(ltt.out.temp[,1], breaks, include.lowest=T)#
				x2 <- tapply(in.file[[xx]]$node.traits, bin.dat, function(x) unlist(x))#
				if(is(x2[[1]])[1] == "numeric") {#
					max.len <- sapply(x2, length)#
					} else {#
					max.len <- sapply(x2, function(kk) kk[1])#
					}#
				thr <- ceiling(sapply(x2 , length) * sample.number)#
				root.state <- in.file[[xx]]$root.state#
				if(length(x2) == 2) {#
					x2 <- lapply(1:2, function(u) x2[[u]][sample(1:(length(x2[[u]])), thr[u])])#
					x.out <- sapply(x2, function(x) {#
						if(length(x) > 10000) x <- x[sample(1:length(x), 10000)]#
						x.in <- as.matrix(x)#
						n.col <- ncol(x.in)#
						if(nrow(x.in) > 2) {#
							euclid.out <- unlist(dispRity(x.in, metric = c(median, pairwise.dist), method="euclidean")$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), 0)#
							sov.out <- unlist(dispRity(x.in, metric = c(sum, variances))$disparity)#
							sor.out <- unlist(dispRity(x.in, metric = c(sum, ranges))$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), in.file[[xx]]$root.state)#
							centroid.out <- unlist(dispRity(x.in, metric = c(centroids, median), centroid=root.state)$disparity)#
							c(euclid.out, sov.out, sor.out, centroid.out)#
						} else {#
							matrix(NA, nrow=2, ncol=2)#
						}#
					}#
				)#
				temp.count <- apply(x.out, 1, diff)#
				if(!all(is.na(temp.count))) {#
					difference.in.metric <- rbind(difference.in.metric, c(apply(x.out, 1, diff), sapply(x2, length)))#
				} else {#
					difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
					}#
			} else {#
				difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
			}#
		}#
		colnames(difference.in.metric) <- c("euclidean", "sov", "sor", "centroid", "n_bin1", "n_bin2")#
		list.full[[counter]] <- difference.in.metric#
		counter <- counter + 1 #
		}#
	}#
	names(list.full) <- c(paste("four bins", c(1, 0.5, 0.1, 0.01)), paste("eight bins", c(1, 0.5, 0.1, 0.01)), paste("ten bins", c(1, 0.5, 0.1, 0.01)), #
paste("sixteen bins", c(1, 0.5, 0.1, 0.01)))#
	list.full#
	}#
)
rm(list=ls(all=TRUE))
# source('/panfs/panasas01/gely/mp1728/disp_sim/distance.measures.R', chdir = TRUE)#
#
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
sigma.files <- list.files(pattern="tips_")#
all.files <- all.files.start <- c()#
all.outs <- mclapply(1:length(sigma.files), mc.cores=n.cores , FUN=function(count) {#
	load(sigma.files[count] ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub(".R", "", sigma.files[count])))#
	list.full <- list()#
	counter <- 1#
	# four, six, ten, bins#
	for(bin.number in c(2, 4, 5, 8)) {#
		# complete, half, tenth, hundreth sampling#
		for(sample.number in c(1, 0.5, 0.1, 0.01)) {#
			difference.in.metric <- c()#
			for(xx in 1:100) {#
				ltt.out.temp <- in.file[[xx]]$ltt#
				mass.time.temp <- in.file[[xx]]$mass.ext.time#
				end.seq <- max(ltt.out.temp[,1])#
				mass.to.end <- end.seq - mass.time.temp#
				pre.mass <- mass.time.temp - (mass.to.end / bin.number)#
				end.seq <- mass.time.temp + (mass.to.end / bin.number)#
				breaks <- c(pre.mass, mass.time.temp, end.seq)#
				bin.dat <- .bincode(ltt.out.temp[,1], breaks, include.lowest=T)#
				x2 <- tapply(in.file[[xx]]$node.traits, bin.dat, function(x) unlist(x))#
				if(is(x2[[1]])[1] == "numeric") {#
					max.len <- sapply(x2, length)#
					} else {#
					max.len <- sapply(x2, function(kk) kk[1])#
					}#
				thr <- ceiling(sapply(x2 , length) * sample.number)#
				root.state <- in.file[[xx]]$root.state#
				if(length(x2) == 2) {#
					x2 <- lapply(1:2, function(u) x2[[u]][sample(1:(length(x2[[u]])), thr[u])])#
					x.out <- sapply(x2, function(x) {#
						if(length(x) > 10000) x <- x[sample(1:length(x), 10000)]#
						x.in <- as.matrix(x)#
						n.col <- ncol(x.in)#
						if(nrow(x.in) > 2) {#
							euclid.out <- unlist(dispRity(x.in, metric = c(median, pairwise.dist), method="euclidean")$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), 0)#
							sov.out <- unlist(dispRity(x.in, metric = c(sum, variances))$disparity)#
							sor.out <- unlist(dispRity(x.in, metric = c(sum, ranges))$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), in.file[[xx]]$root.state)#
							centroid.out <- unlist(dispRity(x.in, metric = c(centroids, median), centroid=root.state)$disparity)#
							c(euclid.out, sov.out, sor.out, centroid.out)#
						} else {#
							matrix(NA, nrow=2, ncol=2)#
						}#
					}#
				)#
				temp.count <- apply(x.out, 1, diff)#
				if(!all(is.na(temp.count))) {#
					difference.in.metric <- rbind(difference.in.metric, c(apply(x.out, 1, diff), sapply(x2, length)))#
				} else {#
					difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
					}#
			} else {#
				difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
			}#
		}#
		colnames(difference.in.metric) <- c("euclidean", "sov", "sor", "centroid", "n_bin1", "n_bin2")#
		list.full[[counter]] <- difference.in.metric#
		counter <- counter + 1 #
		}#
	}#
	names(list.full) <- c(paste("four bins", c(1, 0.5, 0.1, 0.01)), paste("eight bins", c(1, 0.5, 0.1, 0.01)), paste("ten bins", c(1, 0.5, 0.1, 0.01)), #
paste("sixteen bins", c(1, 0.5, 0.1, 0.01)))#
	list.full#
	}#
)#
#
names(all.outs) <- sigma.files#
saveRDS(all.outs, "metric.bins.R")
rm(list=ls(all=TRUE))
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
sigma.files <- list.files(pattern="tips_")#
all.files <- all.files.start <- c()
count=1
load(sigma.files[count] ,verbose=TRUE)
in.file <- eval(parse(text=gsub(".R", "", sigma.files[count])))#
	list.full <- list()#
	counter <- 1
sigma.files[count]
## Puttick et al. #
## Estimate disparity for generated data using median pairwise euclidean distance, median pairwise distance from the root,#
## Sum Of Variances, and Sum Of Ranges using the dispRity package.#
#
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## files to summarise#
input.file <- list.files(pattern="tips_")#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
all.outs <- mclapply(1:length(sigma.files), mc.cores=16, FUN=function(count) {#
	load(input.file ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub(".R", "", input.file)))#
	ltt.out <- list()#
#
	for(xx in 1:100) {#
		ltt.out.temp <- in.file[[xx]]$ltt#
		going <- c()		#
		root.state <- in.file[[xx]]$root.state#
		x.out <- sapply(in.file[[xx]]$node.traits, function(x) {#
			x.in <- as.matrix(x)#
			n.col <- ncol(x.in)#
			if(nrow(x.in) > 2) {#
				euclid.out <- unlist(dispRity(x.in, metric = c(median, pairwise.dist), method="euclidean")$disparity)	#
				if(n.col == 1) x.in <- cbind(as.matrix(x), 0)#
				sov.out <- unlist(dispRity(x.in, metric = c(sum, variances))$disparity)#
				sor.out <- unlist(dispRity(x.in, metric = c(sum, ranges))$disparity)#
				if(n.col == 1) x.in <- cbind(as.matrix(x), in.file[[xx]]$root.state)#
				centroid.out <- unlist(dispRity(x.in, metric = c(centroids, median), centroid=root.state)$disparity)#
				cbind(euclid.out, sov.out, sor.out, centroid.out)#
				} else {#
				cbind(rep(NA, 4))#
				}#
			}#
		)#
		x.out <- t(x.out)#
		node.info <- cbind(ltt.out.temp, x.out)#
		colnames(node.info)[-c(1:2)] <- c("median.euclidean", "sov", "sor", "centroid")#
		ltt.out[[xx]] <- node.info#
	}#
	ltt.write <- gsub(".R", ".dvltt", input.file)#
	assign(ltt.write, ltt.out)#
	save(list=ltt.write, file=gsub(".R", ".dvltt.R", input.file), compress="xz")
# source('/panfs/panasas01/gely/mp1728/disp_sim/distance.measures.R', chdir = TRUE)#
#
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
sigma.files <- list.files(pattern="tips_")#
all.files <- all.files.start <- c()#
all.outs <- mclapply(1:length(sigma.files), mc.cores=n.cores , FUN=function(count) {#
	load(sigma.files[count] ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub(".R", "", sigma.files[count])))#
	list.full <- list()#
	counter <- 1#
	# four, six, ten, bins#
	for(bin.number in c(2, 4, 5, 8)) {#
		# complete, half, tenth, hundreth sampling#
		for(sample.number in c(1, 0.5, 0.1, 0.01)) {#
			difference.in.metric <- c()#
			for(xx in 1:100) {#
				ltt.out.temp <- in.file[[xx]]$ltt#
				mass.time.temp <- in.file[[xx]]$mass.ext.time#
				end.seq <- max(ltt.out.temp[,1])#
				mass.to.end <- end.seq - mass.time.temp#
				pre.mass <- mass.time.temp - (mass.to.end / bin.number)#
				end.seq <- mass.time.temp + (mass.to.end / bin.number)#
				breaks <- c(pre.mass, mass.time.temp, end.seq)#
				bin.dat <- .bincode(ltt.out.temp[,1], breaks, include.lowest=T)#
				x2 <- tapply(in.file[[xx]]$node.traits, bin.dat, function(x) unlist(x))#
				if(is(x2[[1]])[1] == "numeric") {#
					max.len <- sapply(x2, length)#
					} else {#
					max.len <- sapply(x2, function(kk) kk[1])#
					}#
				thr <- ceiling(sapply(x2 , length) * sample.number)#
				root.state <- in.file[[xx]]$root.state#
				if(length(x2) == 2) {#
					x2 <- lapply(1:2, function(u) x2[[u]][sample(1:(length(x2[[u]])), thr[u])])#
					x.out <- sapply(x2, function(x) {#
						if(length(x) > 10000) x <- x[sample(1:length(x), 10000)]#
						x.in <- as.matrix(x)#
						n.col <- ncol(x.in)#
						if(nrow(x.in) > 2) {#
							euclid.out <- unlist(dispRity(x.in, metric = c(median, pairwise.dist), method="euclidean")$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), 0)#
							sov.out <- unlist(dispRity(x.in, metric = c(sum, variances))$disparity)#
							sor.out <- unlist(dispRity(x.in, metric = c(sum, ranges))$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), in.file[[xx]]$root.state)#
							centroid.out <- unlist(dispRity(x.in, metric = c(centroids, median), centroid=root.state)$disparity)#
							c(euclid.out, sov.out, sor.out, centroid.out)#
						} else {#
							matrix(NA, nrow=2, ncol=2)#
						}#
					}#
				)#
				temp.count <- apply(x.out, 1, diff)#
				if(!all(is.na(temp.count))) {#
					difference.in.metric <- rbind(difference.in.metric, c(apply(x.out, 1, diff), sapply(x2, length)))#
				} else {#
					difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
					}#
			} else {#
				difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
			}#
		}#
		colnames(difference.in.metric) <- c("euclidean", "sov", "sor", "centroid", "n_bin1", "n_bin2")#
		list.full[[counter]] <- difference.in.metric#
		counter <- counter + 1 #
		}#
	}#
	names(list.full) <- c(paste("four bins", c(1, 0.5, 0.1, 0.01)), paste("eight bins", c(1, 0.5, 0.1, 0.01)), paste("ten bins", c(1, 0.5, 0.1, 0.01)), #
paste("sixteen bins", c(1, 0.5, 0.1, 0.01)))#
	list.full#
	}#
)
load(sigma.files[count] ,verbose=TRUE)
count=1
load(sigma.files[count] ,verbose=TRUE)
in.file <- eval(parse(text=gsub(".R", "", sigma.files[count])))
sigma.files[count]
in.file <- eval(parse(text=gsub("dvltt.R", "dvtt", sigma.files[count])))
rm(list=ls(all=T))
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
sigma.files <- list.files(pattern="tips_")#
all.files <- all.files.start <- c()#
all.outs <- mclapply(1:length(sigma.files), mc.cores=n.cores , FUN=function(count) {#
	load(sigma.files[count] ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub("dvltt.R", "dvtt", sigma.files[count])))#
	list.full <- list()#
	counter <- 1#
	# four, six, ten, bins#
	for(bin.number in c(2, 4, 5, 8)) {#
		# complete, half, tenth, hundreth sampling#
		for(sample.number in c(1, 0.5, 0.1, 0.01)) {#
			difference.in.metric <- c()#
			for(xx in 1:100) {#
				ltt.out.temp <- in.file[[xx]]$ltt#
				mass.time.temp <- in.file[[xx]]$mass.ext.time#
				end.seq <- max(ltt.out.temp[,1])#
				mass.to.end <- end.seq - mass.time.temp#
				pre.mass <- mass.time.temp - (mass.to.end / bin.number)#
				end.seq <- mass.time.temp + (mass.to.end / bin.number)#
				breaks <- c(pre.mass, mass.time.temp, end.seq)#
				bin.dat <- .bincode(ltt.out.temp[,1], breaks, include.lowest=T)#
				x2 <- tapply(in.file[[xx]]$node.traits, bin.dat, function(x) unlist(x))#
				if(is(x2[[1]])[1] == "numeric") {#
					max.len <- sapply(x2, length)#
					} else {#
					max.len <- sapply(x2, function(kk) kk[1])#
					}#
				thr <- ceiling(sapply(x2 , length) * sample.number)#
				root.state <- in.file[[xx]]$root.state#
				if(length(x2) == 2) {#
					x2 <- lapply(1:2, function(u) x2[[u]][sample(1:(length(x2[[u]])), thr[u])])#
					x.out <- sapply(x2, function(x) {#
						if(length(x) > 10000) x <- x[sample(1:length(x), 10000)]#
						x.in <- as.matrix(x)#
						n.col <- ncol(x.in)#
						if(nrow(x.in) > 2) {#
							euclid.out <- unlist(dispRity(x.in, metric = c(median, pairwise.dist), method="euclidean")$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), 0)#
							sov.out <- unlist(dispRity(x.in, metric = c(sum, variances))$disparity)#
							sor.out <- unlist(dispRity(x.in, metric = c(sum, ranges))$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), in.file[[xx]]$root.state)#
							centroid.out <- unlist(dispRity(x.in, metric = c(centroids, median), centroid=root.state)$disparity)#
							c(euclid.out, sov.out, sor.out, centroid.out)#
						} else {#
							matrix(NA, nrow=2, ncol=2)#
						}#
					}#
				)#
				temp.count <- apply(x.out, 1, diff)#
				if(!all(is.na(temp.count))) {#
					difference.in.metric <- rbind(difference.in.metric, c(apply(x.out, 1, diff), sapply(x2, length)))#
				} else {#
					difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
					}#
			} else {#
				difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
			}#
		}#
		colnames(difference.in.metric) <- c("euclidean", "sov", "sor", "centroid", "n_bin1", "n_bin2")#
		list.full[[counter]] <- difference.in.metric#
		counter <- counter + 1 #
		}#
	}#
	names(list.full) <- c(paste("four bins", c(1, 0.5, 0.1, 0.01)), paste("eight bins", c(1, 0.5, 0.1, 0.01)), paste("ten bins", c(1, 0.5, 0.1, 0.01)), #
paste("sixteen bins", c(1, 0.5, 0.1, 0.01)))#
	list.full#
	}#
)
count=1
load(sigma.files[count] ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub("dvltt.R", "dvtt", sigma.files[count])))#
	list.full <- list()#
	counter <- 1
bin.number=2
sample.number=1
difference.in.metric <- c()
xx=1
ltt.out.temp <- in.file[[xx]]$ltt#
				mass.time.temp <- in.file[[xx]]$mass.ext.time#
				end.seq <- max(ltt.out.temp[,1])#
				mass.to.end <- end.seq - mass.time.temp#
				pre.mass <- mass.time.temp - (mass.to.end / bin.number)#
				end.seq <- mass.time.temp + (mass.to.end / bin.number)#
				breaks <- c(pre.mass, mass.time.temp, end.seq)#
				bin.dat <- .bincode(ltt.out.temp[,1], breaks, include.lowest=T)#
				x2 <- tapply(in.file[[xx]]$node.traits, bin.dat, function(x) unlist(x))
in.file[[xx]]
ltt.out.temp <- in.file[[xx]]$lineages
in.file[[xx]]
sigma.files
# source('/panfs/panasas01/gely/mp1728/disp_sim/distance.measures.R', chdir = TRUE)#
#
library(parallel)#
library(RSOLE)#
library(dispRity)#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
sigma.files <- "tips_50.mu_0.4.severity_0.5.random_0.01.R"#
all.files <- all.files.start <- c()
all.outs <- mclapply(1:length(sigma.files), mc.cores=n.cores , FUN=function(count) {#
	load(sigma.files[count] ,verbose=TRUE)#
	in.file <- eval(parse(text=gsub(".R", "", sigma.files[count])))#
	list.full <- list()#
	counter <- 1#
	# four, six, ten, bins#
	for(bin.number in c(2, 4, 5, 8)) {#
		# complete, half, tenth, hundreth sampling#
		for(sample.number in c(1, 0.5, 0.1, 0.01)) {#
			difference.in.metric <- c()#
			for(xx in 1:100) {#
				ltt.out.temp <- in.file[[xx]]$ltt#
				mass.time.temp <- in.file[[xx]]$mass.ext.time#
				end.seq <- max(ltt.out.temp[,1])#
				mass.to.end <- end.seq - mass.time.temp#
				pre.mass <- mass.time.temp - (mass.to.end / bin.number)#
				end.seq <- mass.time.temp + (mass.to.end / bin.number)#
				breaks <- c(pre.mass, mass.time.temp, end.seq)#
				bin.dat <- .bincode(ltt.out.temp[,1], breaks, include.lowest=T)#
				x2 <- tapply(in.file[[xx]]$node.traits, bin.dat, function(x) unlist(x))#
				if(is(x2[[1]])[1] == "numeric") {#
					max.len <- sapply(x2, length)#
					} else {#
					max.len <- sapply(x2, function(kk) kk[1])#
					}#
				thr <- ceiling(sapply(x2 , length) * sample.number)#
				root.state <- in.file[[xx]]$root.state#
				if(length(x2) == 2) {#
					x2 <- lapply(1:2, function(u) x2[[u]][sample(1:(length(x2[[u]])), thr[u])])#
					x.out <- sapply(x2, function(x) {#
						if(length(x) > 10000) x <- x[sample(1:length(x), 10000)]#
						x.in <- as.matrix(x)#
						n.col <- ncol(x.in)#
						if(nrow(x.in) > 2) {#
							euclid.out <- unlist(dispRity(x.in, metric = c(median, pairwise.dist), method="euclidean")$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), 0)#
							sov.out <- unlist(dispRity(x.in, metric = c(sum, variances))$disparity)#
							sor.out <- unlist(dispRity(x.in, metric = c(sum, ranges))$disparity)#
							if(n.col == 1) x.in <- cbind(as.matrix(x), in.file[[xx]]$root.state)#
							centroid.out <- unlist(dispRity(x.in, metric = c(centroids, median), centroid=root.state)$disparity)#
							c(euclid.out, sov.out, sor.out, centroid.out)#
						} else {#
							matrix(NA, nrow=2, ncol=2)#
						}#
					}#
				)#
				temp.count <- apply(x.out, 1, diff)#
				if(!all(is.na(temp.count))) {#
					difference.in.metric <- rbind(difference.in.metric, c(apply(x.out, 1, diff), sapply(x2, length)))#
				} else {#
					difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
					}#
			} else {#
				difference.in.metric <- rbind(difference.in.metric, rep(NA, 6))#
			}#
		}#
		colnames(difference.in.metric) <- c("euclidean", "sov", "sor", "centroid", "n_bin1", "n_bin2")#
		list.full[[counter]] <- difference.in.metric#
		counter <- counter + 1 #
		}#
	}#
	names(list.full) <- c(paste("four bins", c(1, 0.5, 0.1, 0.01)), paste("eight bins", c(1, 0.5, 0.1, 0.01)), paste("ten bins", c(1, 0.5, 0.1, 0.01)), #
paste("sixteen bins", c(1, 0.5, 0.1, 0.01)))#
	list.full#
	}#
)
names(all.outs) <- sigma.files
saveRDS(all.outs, "tips_50.mu_0.4.severity_0.5.random_0.01_bin")
## Puttick et al. #
## Take simulated data and pruned trees of all fossils, then estimate parameters Phylogenetic Comparative models:#
## Brownian motion, Ornstein-Uhlenbeck, and Early Burst#
#
library(motmot)#
#
## n cores for parallel processing on Mac and Linux machines#
	n.cores <- 1#
#
## input file for parallel processing on Mac and Linux machines#
	all.files <- "tips_50.mu_0.4.severity_0.5.random_0.01.R"#
#
	out.all <- c()#
	for(count in 1:length(all.files)) {#
		load(all.files[count] ,verbose=T)#
		in.file <- eval(parse(text=gsub(".R", "", all.files[count])))#
		bm.aicc <- eb.aicc <- ou.aicc <- c()#
		for(phy.x in 1:100) {	#
			phy <- in.file[[phy.x]][[1]]#
			extant.phy <- drop.fossil(phy)#
			drop.tips <- which(is.na(match(phy$tip.label, extant.phy$tip.label)))#
			phy.tip <- which(phy$edge[,2] <= Ntip(phy))#
			y.all <- in.file[[phy.x]]$trait.matrix[[1]][phy.tip , 2]#
			if(length(drop.tips) > 0) {#
				phy.y <- as.matrix(y.all[-drop.tips])#
			} else {#
				phy.y <- as.matrix(y.all)#
			}#
		rownames(phy.y) <- extant.phy$tip.label#
		bm.aicc <- rbind(bm.aicc, unlist(transformPhylo.ML(y=phy.y, phy=extant.phy, model="bm")))#
		eb.aicc <- rbind(eb.aicc, unlist(suppressWarnings(transformPhylo.ML(y=phy.y, phy=extant.phy, model="ACDC", upperBound=-1e-6, modelCI=FALSE))))#
		ou.aicc <- rbind(ou.aicc, suppressWarnings(transformPhylo.ML(y=phy.y, phy=extant.phy, model="OU",modelCI=FALSE)))#
		cat("\r", paste0(phy.x, " %"))#
	}
out.all <- list(bm.aicc, eb.aicc, ou.aicc)#
	name.out <- gsub(".R", ".models", all.files[count])#
	assign(name.out, out.all)#
	save(list=name.out, file=gsub(".R", ".models.R", all.files[count]))#
}
library(motmot.2.0)#
library(caper)#
library(parallel)#
sigma.val <- 1#
all.files <- list.files()#
all.files.start <- c()#
#
all.files <- "tips_50.mu_0.4.severity_0.5.random_0.01.R"#
load(all.files ,verbose=TRUE)#
in.file <- eval(parse(text=gsub(".R", "", all.files)))
in.file[[1]]
mass.ext.time <- sapply(in.file, function(x) x$mass.ext.time)
mass.ext.time
u=1
phy.d <- lm.model <- ols.model <- list()
phy <- in.file[[u]][[1]]
y <- in.file[[u]]$trait.matrix[[1]]
mass.ext.time <- max(nodeTimes(phy)) - in.file[[u]]$mass.ext.time
library(motmot)
mass.ext.time <- max(nodeTimes(phy)) - in.file[[u]]$mass.ext.time
phy.2 <- contemporaryPhy(phy, mass.ext.time+0.0001, mass.ext.time, reScale = 0, allTraits=y[,2], closest.min = TRUE, traits.from.tip = F)
nt <- nodeTimes(phy)
dead.lin <- phy$tip.label[phy$edge[which(signif(nodeTimes(phy)[,2], 6) == signif(mass.ext.time, 6)),2]]
all.dead <- match(dead.lin, phy.2[[1]]$tip.label)
all.tips <- rep(0, Ntip(phy.2[[1]]))
all.tips[all.dead] <- 1
yt <- as.matrix(cbind(phy.2[[1]]$tip.label, all.tips))
yt <- data.frame(yt)
rownames(yt) <- phy.2[[1]]$tip.label
colnames(yt) <- c("tips", "ext")
comp.data <- comparative.data(phy.2[[1]], yt, tips)
try <- FALSE#
		while(try[1] == FALSE) {#
		done <- TRUE#
		try <- tryCatch(phylo.d(comp.data, binvar=ext), error = function(eek) {#
			print("phylo D error")#
			FALSE#
				}#
			)#
		}
phy.d[[u]] <- try
phy.d[[u]] <- try#
#
		yt <- data.frame(cbind(phy.2[[1]]$tip.label, all.tips, phy.2[[3]]))#
		rownames(yt) <- phy.2[[1]]$tip.label#
		colnames(yt) <- c("tips", "ext", "y.val")#
		yt[,3] <- as.numeric(as.character(yt[,3]))#
		comp.data.lm <- comparative.data(phy.2[[1]], yt, tips, vcv=TRUE)#
#
		mat <- as.matrix(yt[,3])#
		rownames(mat) <- phy.2[[1]]$tip.label#
		lm.val <- transformPhylo.ML(mat, phy.2[[1]], model="lambda", modelCIs=FALSE)$Lambda[[1]]#
		mod1 <- pgls(y.val ~ ext, data=comp.data.lm, lambda=lm.val)
mod2 <- lm(y.val ~ ext, data=yt)
summary(mod1)
lm.val
rm(list=ls(all=TRUE))
library(motmot)#
library(caper)#
library(parallel)#
sigma.val <- 1#
all.files <- list.files()#
all.files.start <- c()#
#
all.files <- "tips_50.mu_0.4.severity_0.5.random_0.01.R"#
load(all.files ,verbose=TRUE)#
in.file <- eval(parse(text=gsub(".R", "", all.files)))#
#
	mass.ext.time <- sapply(in.file, function(x) x$mass.ext.time)#
	phy.d <- lm.model <- ols.model <- list()#
#
	for(u in 1:100) {#
		phy <- in.file[[u]][[1]]#
		y <- in.file[[u]]$trait.matrix[[1]]#
		mass.ext.time <- max(nodeTimes(phy)) - in.file[[u]]$mass.ext.time#
		phy.2 <- contemporaryPhy(phy, mass.ext.time+0.0001, mass.ext.time, reScale = 0, allTraits=y[,2], closest.min = TRUE, traits.from.tip = F)#
		nt <- nodeTimes(phy)#
		dead.lin <- phy$tip.label[phy$edge[which(signif(nodeTimes(phy)[,2], 6) == signif(mass.ext.time, 6)),2]]#
		all.dead <- match(dead.lin, phy.2[[1]]$tip.label)#
		all.tips <- rep(0, Ntip(phy.2[[1]]))#
		all.tips[all.dead] <- 1#
		yt <- as.matrix(cbind(phy.2[[1]]$tip.label, all.tips))#
		yt <- data.frame(yt)#
		rownames(yt) <- phy.2[[1]]$tip.label#
		colnames(yt) <- c("tips", "ext")#
		comp.data <- comparative.data(phy.2[[1]], yt, tips)#
#
		try <- FALSE#
		while(try[1] == FALSE) {#
		done <- TRUE#
		try <- tryCatch(phylo.d(comp.data, binvar=ext), error = function(eek) {#
			print("phylo D error")#
			FALSE#
				}#
			)#
		}#
#
		phy.d[[u]] <- try#
#
		yt <- data.frame(cbind(phy.2[[1]]$tip.label, all.tips, phy.2[[3]]))#
		rownames(yt) <- phy.2[[1]]$tip.label#
		colnames(yt) <- c("tips", "ext", "y.val")#
		yt[,3] <- as.numeric(as.character(yt[,3]))#
		comp.data.lm <- comparative.data(phy.2[[1]], yt, tips, vcv=TRUE)#
#
		mat <- as.matrix(yt[,3])#
		rownames(mat) <- phy.2[[1]]$tip.label#
		lm.val <- transformPhylo.ML(mat, phy.2[[1]], model="lambda", modelCIs=FALSE)$Lambda[[1]]#
		mod1 <- pgls(y.val ~ ext, data=comp.data.lm, lambda=lm.val)		#
#
		mod2 <- lm(y.val ~ ext, data=yt)#
		lm.model[[u]] <- summary(mod1)#
		ols.model[[u]] <- summary(mod2)#
	}
signif.lm <- length(which(sapply(1:100, function(x) lm.model[[x]]$coefficients[2,4]) < 0.05))#
	slope.lm <- median(sapply(1:100, function(x) lm.model[[x]]$coefficients[2,1]))#
	range.lm <- range(sapply(1:100, function(x) lm.model[[x]]$coefficients[2,1]))#
	lm.stats <- paste0(signif.3(slope.lm), " (", signif.3(range.lm[1]), ", ", signif.3(range.lm[2]),")")
signif(slope.lm)
signif.lm <- length(which(sapply(1:100, function(x) lm.model[[x]]$coefficients[2,4]) < 0.05))#
	slope.lm <- median(sapply(1:100, function(x) lm.model[[x]]$coefficients[2,1]))#
	range.lm <- range(sapply(1:100, function(x) lm.model[[x]]$coefficients[2,1]))#
	lm.stats <- paste0(signif(slope.lm), " (", signif(range.lm[1]), ", ", signif(range.lm[2]),")")
all.lm <- sapply(1:100, function(x) lm.model[[x]]$coefficients[2,1])
signif.ols <- length(which(sapply(1:100, function(x) ols.model[[x]]$coefficients[2,4]) < 0.05))#
	slope.ols <- median(sapply(1:100, function(x) ols.model[[x]]$coefficients[2,1]))#
	range.ols <- range(sapply(1:100, function(x) ols.model[[x]]$coefficients[2,1]))#
	ols.stats <- paste0(signif(slope.ols), " (", signif(range.ols[1]), ", ", signif(range.ols[2]),")")
all.ols <- sapply(1:100, function(x) ols.model[[x]]$coefficients[2,1])
all.dstat <- sapply(phy.d, function(x) x[[1]])
d.stat <- median(unlist(all.dstat))#
	d.stat.range <- range(unlist(all.dstat))#
	d.stats <- paste0(signif.3(d.stat), " (", signif.3(d.stat.range[1]), ", ", signif.3(d.stat.range[2]),")")
d.stats <- paste0(signif(d.stat), " (", signif(d.stat.range[1]), ", ", signif(d.stat.range[2]),")")
signif.bm <- length(which(sapply(1:100, function(x) phy.d[[x]][[3]]) < 0.05))
signif.rnd <- length(which(sapply(1:100, function(x) phy.d[[x]][[2]]) < 0.05))
signif.bm <- length(which(sapply(1:100, function(x) phy.d[[x]][[3]]) < 0.05))#
	signif.rnd <- length(which(sapply(1:100, function(x) phy.d[[x]][[2]]) < 0.05))
all.stats <- cbind(all.lm, all.ols, all.dstat)
colnames(all.stats) <- c("pgls.slope", "ols.slope", "dstatistic")
list(c(lm.stats, signif.lm, ols.stats, signif.ols, signif.bm, signif.rnd, d.stats), all.stats)
output <- list(c(lm.stats, signif.lm, ols.stats, signif.ols, signif.bm, signif.rnd, d.stats), all.stats)
signif.difference.out  <- sapply(output, function(x) x[[1]])
signif.difference.out  <- sapply(output, function(x) x[[1]])#
	colnames(signif.difference.out) <- gsub(".R", "", all.files)#
	rownames(signif.difference.out) <- c("lm.slope", "proportion.lm.signif","ols.slope", "proportion.ols.signif", "phylo.d.support.bm", "phylo.d.support.random", "phylo.d")
signif.difference.out
gsub(".R", "", all.files)
signif.difference.out  <- matrix(sapply(output, function(x) x[[1]]))
colnames(signif.difference.out) <- gsub(".R", "", all.files)
rownames(signif.difference.out) <- c("lm.slope", "proportion.lm.signif","ols.slope", "proportion.ols.signif", "phylo.d.support.bm", "phylo.d.support.random", "phylo.d")
signif.difference.out
output
signif.difference.out  <- matrix(sapply(output, function(x) x[[1]]))
signif.difference.out
c(lm.stats, signif.lm, ols.stats, signif.ols, signif.bm, signif.rnd, d.stats)
signif.difference.out  <- matrix(c(lm.stats, signif.lm, ols.stats, signif.ols, signif.bm, signif.rnd, d.stats))
colnames(signif.difference.out) <- gsub(".R", "", all.files)
rownames(signif.difference.out) <- c("lm.slope", "proportion.lm.signif","ols.slope", "proportion.ols.signif", "phylo.d.support.bm", "phylo.d.support.random", "phylo.d")
signif.difference.out
write.csv(signif.difference.out, "lm.phylo.d.csv")
names(signif.difference) <- all.files
